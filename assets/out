#!/bin/bash

set -e
set -o pipefail

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

source /opt/resource/common.sh

# Read inputs
source=$1
payload=$(mktemp helm-resource-request.XXXXXX)
cat > $payload <&0

# Prepare
setup_resource $payload $source
echo "Resource setup successful."

# Parse parameters
namespace=$(jq -r '.source.namespace // "default"' < $payload)
tiller_namespace=$(jq -r '.source.tiller_namespace // "kube-system"' < $payload)
chart=$(jq -r '.params.chart // ""' < $payload)
version=$(jq -r '.params.version // ""' < $payload)
namespace_file=$(jq -r '.params.namespace // ""' < $payload)
release_file=$(jq -r '.params.release // ""' < $payload)
values=$(jq -r '.params.values // "" | if type == "array" then .[] else . end' < $payload)
wait_until_ready=$(jq -r '.params.wait_until_ready // 0' < $payload)
debug=$(jq -r '.params.debug // "false"' < $payload)
replace=$(jq -r '.params.replace // "false"' < $payload)
delete=$(jq -r '.params.delete // "false"' < $payload)
devel=$(jq -r '.params.devel // "false"' < $payload)
recreate_pods=$(jq -r '.params.recreate_pods // "false"' < $payload)
force=$(jq -r '.params.force // "false"' < $payload)
show_diff=$(jq -r '.params.show_diff // "false"' < $payload)
override_values=$(jq -r ".params.override_values[]? | if .key and .value and (.hide // false) == false then (.key + \"=\" + .value) else empty end | @base64"  < $payload)
override_values_file=$(jq -r ".params.override_values[]? | if .key and .path and (.hide // false) == false then (.key + \"=\" + .path) else empty end" < $payload)
override_secrets=$(jq -r ".params.override_values[]? | if .key and .value and .hide then (.key + \"=\" + .value) else empty end | @base64"  < $payload)
override_secrets_file=$(jq -r ".params.override_values[]? | if .key and .path and .hide then (.key + \"=\" + .path) else empty end" < $payload)
recreate_pods=$(jq -r '.params.recreate_pods // "false"' < $payload)

if [ -z "$chart" ]; then
  echo "invalid payload (missing chart)"
  exit 1
fi

if [ -f "$source/$namespace_file" ]; then
  namespace=`cat $source/$namespace_file`
elif [ -n "$namespace_file" ]; then
  namespace=$namespace_file
fi

if [ -n "$release_file" ]; then
  if [ -f "$source/$release_file" ]; then
    release=`cat $source/$release_file`
  else
    release=$release_file
  fi
else
  release=$(jq -r '.source.release // ""' < $payload)
fi

if [[ "$chart" == *.tgz ]] || [[ -d "$source/$chart" ]]; then
  # it's a file/directory
  chart_full="$source/$chart"
  version=""
else
  # get from a repo
  chart_full="$chart"
fi

set_overridden_values() {
  # Get value from given path
  for overridden_value_file in $override_values_file; do
    # Get key and value for each overridden file value
    key=${overridden_value_file%%=*}
    value=${overridden_value_file#*=}
    overridden_args+=("--set" "$key=$(cat $source/$value)")
    scrubbed_overridden_args+=("--set" "$key=$(cat $source/$value)")
  done

  # Set value directly
  for overridden_value in $override_values; do
    overridden_args+=("--set" "$(echo $overridden_value | base64 -d)")
    scrubbed_overridden_args+=("--set" "$(echo $overridden_value | base64 -d)")
  done

  # Get value from given path, but hide the value in the echo
  for overridden_secret_file in $override_secrets_file; do
    # Get key and value for each overridden file value
    key=${overridden_secret_file%%=*}
    value=${overridden_secret_file#*=}
    overridden_args+=("--set" "$key=$(cat $source/$value)")
    scrubbed_overridden_args+=("--set" "$key=***HIDDEN***")
  done

  # Set value directly, but hide the value in the echo
  for overridden_secret in $override_secrets; do
    kv=$(echo $overridden_secret | base64 -d)
    key=${kv%%=*}
    value=${kv#*=}
    overridden_args+=("--set" "$kv")
    scrubbed_overridden_args+=("--set" "$key=***HIDDEN***")
  done
}

# Find the current revision of a helm release
current_revision() {
  helm history --tiller-namespace $tiller_namespace --max 20 $release | grep "DEPLOYED" | awk '{ print $1 }'
}

helm_upgrade() {
  upgrade_args=("upgrade" "$release" $chart_full "--tiller-namespace=$tiller_namespace")
  non_diff_args=("--install" "--namespace" "$namespace")
  if [ -n "$values" ]; then
    for value in $values; do
      upgrade_args+=("-f" "$source/"$value)
    done
  fi
  overridden_args=()
  scrubbed_overridden_args=()
  set_overridden_values
  if [ -n "$wait_until_ready" ] && [ "$wait_until_ready" -gt "0" ]; then
    non_diff_args+=("--wait" "--timeout" "$wait_until_ready")
  fi
  if [ "$debug" = true ]; then
    upgrade_args+=("--debug")
    non_diff_args+=("--dry-run")
  fi
  if [ "$devel" = true ]; then
    non_diff_args+=("--devel")
  fi
  if [ -n "$version" ]; then
    if [ -f "$source/$version" ]; then
      version=$(cat $source/$version)
    fi
    upgrade_args+=("--version" "$version")
  fi
  if [ "$recreate_pods" = true ]; then
    non_diff_args+=("--recreate-pods")
  fi
  if [ "$force" = true ]; then
    non_diff_args+=("--force")
  fi
  logfile="/tmp/log"
  mkdir -p /tmp

  helm_args=("${upgrade_args[@]}" "${overridden_args[@]}" "${non_diff_args[@]}")
  helm_echo_args=("${upgrade_args[@]}" "${scrubbed_overridden_args[@]}" "${non_diff_args[@]}")
  helm_diff_args=("${upgrade_args[@]}" "${overridden_args[@]}" "--suppress-secrets")
  if [ "$show_diff" = true ] && current_revision > /dev/null && [ "$devel" != true ]; then
    echo "Release diff:"
    helm diff "${helm_diff_args[@]}" | tee "$logfile"
  fi

  echo "Running command helm ${helm_echo_args[@]} | tee $logfile"
  helm "${helm_args[@]}" | tee "$logfile"
}

helm_delete() {
  if [ -z "$release" ]; then
    echo "invalid payload (missing release if delete=true)"
    exit 1
  fi
  echo "Deleting the release $release..."
  delete_args=("delete" "--tiller-namespace=$tiller_namespace")
  if [ "$debug" = true ]; then
    delete_args+=("--dry-run" "--debug")
  fi
  delete_args+=("$release")
  logfile="/tmp/log"
  mkdir -p /tmp
  echo "Running command helm ${delete_args[@]} | tee $logfile"
  helm "${delete_args[@]}" | tee $logfile
}

wait_ready_notice() {
  if [ -n "$wait_until_ready" ] && [ "$wait_until_ready" -gt "0" ]; then
    echo "Waiting until deployment of $release is ready... (up to $wait_until_ready seconds)"
  fi
}


if [ "$delete" = true ]; then
  helm_delete
  result="$(jq -n "{version:{release:\"$release\", deleted: \"true\"}, metadata: [{name: \"release\", value: \"$release\"}]}")"
  echo "$result" | jq -s add  >&3
else
  echo "Installing $release"
  helm_upgrade

  revision=$(current_revision)
  echo "Deployed revision $revision of $release"
  wait_ready_notice
  result="$(jq -n "{version:{release:\"$release\", revision:\"$revision\"}, metadata: [{name: \"release\", value: \"$release\"},{name: \"revision\", value: \"$revision\"}]}")"
  echo "$result" | jq -s add  >&3
fi
