#!/bin/bash

set -e
set -o pipefail

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

source /opt/resource/common.sh

# Read inputs
source=$1
payload=$(mktemp helm-resource-request.XXXXXX)
cat > $payload <&0

# Prepare
setup_resource $payload $source
echo "Resource setup successful."

# Parse parameters
tillerless=$(jq -r '.source.tillerless // "false"' < $payload)
tillerless_silent=$(jq -r '.source.tillerless_silent // "true"' < $payload)
namespace=$(jq -r '.source.namespace // "default"' < $payload)
# tiller_namespace is computed in a more robust manner in common.sh via setup_resource. Don't override it here!
# tiller_namespace=$(jq -r '.params.tiller_namespace // ""' < $payload)
chart=$(jq -r '.params.chart // ""' < $payload)
version=$(jq -r '.params.version // ""' < $payload)
namespace_file=$(jq -r '.params.namespace // ""' < $payload)
release_file=$(jq -r '.params.release // ""' < $payload)
values=$(jq -r '.params.values // "" | if type == "array" then .[] else . end' < $payload)
wait_until_ready=$(jq -r '.params.wait_until_ready // 0' < $payload)
debug=$(jq -r '.params.debug // "false"' < $payload)
replace=$(jq -r '.params.replace // "false"' < $payload)
delete=$(jq -r '.params.delete // "false"' < $payload)
test=$(jq -r '.params.test // "false"' < $payload)
purge=$(jq -r '.params.purge // "false"' < $payload)
devel=$(jq -r '.params.devel // "false"' < $payload)
atomic=$(jq -r '.params.atomic // "false"' < $payload)
recreate_pods=$(jq -r '.params.recreate_pods // "false"' < $payload)
force=$(jq -r '.params.force // "false"' < $payload)
show_diff=$(jq -r '.params.show_diff // "false"' < $payload)
recreate_pods=$(jq -r '.params.recreate_pods // "false"' < $payload)
tls_enabled=$(jq -r '.source.tls_enabled // "false"' < $payload)
exit_after_diff=$(jq -r '.params.exit_after_diff // "false"' < $payload)
reuse_values=$(jq -r '.params.reuse_values // "false"' < $payload)
reset_values=$(jq -r '.params.reset_values // "false"' < $payload)
wait=$(jq -r '.params.wait // 0' < $payload)
check_is_ready=$(jq -r '.params.check_is_ready // "false"' < $payload)
kubeconfig_namespace=$(jq -r '.source.kubeconfig_namespace // "false"' < $payload)

# helmfile params
hf_enable=$(jq -r '.params.helmfile.enable // "false"' < $payload)
hf_action=$(jq -r '.params.helmfile.action // "apply"' < $payload)
hf_directory=$(jq -r '.params.helmfile.directory // "."' < $payload)
hf_file=$(jq -r '.params.helmfile.file // "helmfile.yaml"' < $payload)
hf_environment=$(jq -r '.params.helmfile.environment // ""' < $payload)
hf_state_values_file=$(jq -r '.params.helmfile.state_values_file // ""' < $payload)
hf_state_values_set=$(jq -r '.params.helmfile.state_values_set // ""' < $payload)
hf_selector=$(jq -r '.params.helmfile.selector // ""' < $payload)
hf_env_vars=$(jq -r '.params.helmfile.env_vars // ""' < $payload)

if [ -z "$chart" ]; then
  if [ "$hf_enable" = "false" ]; then
    if [[ "$test" == "false" && "$delete" == "false" ]]; then
      echo "invalid payload (missing chart)"
      exit 1
    fi
  fi
fi
if [ -f "$source/$namespace_file" ]; then
  namespace=`cat $source/$namespace_file`
elif [ -n "$namespace_file" ]; then
  namespace=$namespace_file
fi

if [ "$kubeconfig_namespace" = "true" ] ; then
  namespace=$(kubectl config view --minify -ojson | jq -r .contexts[].context.namespace)
fi

if [ -n "$release_file" ]; then
  if [ -f "$source/$release_file" ]; then
    release=`cat $source/$release_file`
  else
    release=$release_file
  fi
else
  release=$(jq -r '.source.release // ""' < $payload)
fi

# Expand env variables such as resource metadata (see https://concourse-ci.org/implementing-resource-types.html#resource-metadata)
release=$(echo -n "$release" | envsubst)

if [[ "$chart" == *.tgz ]] || [[ -d "$source/$chart" ]]; then
  # it's a file/directory
  chart_full="$source/$chart"
  version=""
else
  # get from a repo
  chart_full="$chart"
fi

if [ "$tls_enabled" = true ]; then
  tls_flag="--tls"
fi

if [ "$tillerless" = true ]; then
  if [ "$tillerless_silent" = true ]; then
    export HELM_TILLER_SILENT=true
  fi
  helm_bin="helm tiller run ${tiller_namespace} -- helm"
else
  helm_bin="helm"
fi

set_overridden_values() {
  while read -r -d '' key && read -r -d '' value && read -r -d '' path && read -r -d '' hidden && read -r -d '' type && read -r -d '' verbatim; do
    if [ -n "$path" ]; then
      value="$(< "$source/$path")"
    fi

    if [ "$verbatim" != 'false' ]; then
      value="${value/\\/\\\\}"
    fi

    scrubbed_value="$value"
    if [ "$hidden" != 'false' ]; then
      scrubbed_value='***HIDDEN***'
    fi

    helm_set_opt='--set'
    if [ "$type" == 'string' ]; then
      helm_set_opt='--set-string'
    fi

    overridden_args+=("$helm_set_opt" "$key=$value")
    scrubbed_overridden_args+=("$helm_set_opt" "$key=$scrubbed_value")
  done < <(jq -j '.params.override_values[]? | if .key and (.value or .path) then (.key, .value // "", .path // "", .hide // false, .type, .verbatim // false) else empty end | tostring + "\u0000"'  < $payload)
}

# Find the current revision of a helm release
current_deployed() {
  local release="$1"
  $helm_bin history $tls_flag --tiller-namespace $tiller_namespace --max 20 $release | grep "DEPLOYED"
}

helm_upgrade() {
  non_diff_args=("--namespace" "$namespace")
  if [ "$release" = "" ]; then
    upgrade_args=("install" $chart_full "--tiller-namespace=$tiller_namespace")
  else
    upgrade_args=("upgrade" "$release" $chart_full "--tiller-namespace=$tiller_namespace")
    non_diff_args+=("--install")
  fi

  if [ -n "$values" ]; then
    for value in $values; do
      upgrade_args+=("-f" "$source/"$value)
    done
  fi
  overridden_args=()
  scrubbed_overridden_args=()
  set_overridden_values
  if [ -n "$wait_until_ready" ] && [ "$wait_until_ready" -gt "0" ]; then
    non_diff_args+=("--wait" "--timeout" "$wait_until_ready")
  fi

  if [ "$check_is_ready" = true ] && [ "$wait_until_ready" -lt "1" ]; then
      non_diff_args+=("--wait")
  fi

  if [ "$debug" = true ]; then
    upgrade_args+=("--debug")
    non_diff_args+=("--dry-run")
  fi
  if [ "$devel" = true ]; then
    non_diff_args+=("--devel")
  fi
  if [ -n "$version" ]; then
    if [ -f "$source/$version" ]; then
      version=$(cat $source/$version)
    fi
    upgrade_args+=("--version" "$version")
  fi
  if [ "$atomic" = true ]; then
    non_diff_args+=("--atomic")
  fi
  if [ "$recreate_pods" = true ]; then
    non_diff_args+=("--recreate-pods")
  fi
  if [ "$force" = true ]; then
    non_diff_args+=("--force")
  fi
  if [ "$reuse_values" = true ]; then
    upgrade_args+=("--reuse-values")
    non_diff_args+=("--reuse-values")
  fi
  if [ "$reset_values" = true ]; then
    upgrade_args+=("--reset-values")
    non_diff_args+=("--reset-values")
  fi

  logfile="/tmp/log"
  mkdir -p /tmp

  helm_args=("${upgrade_args[@]}" "${overridden_args[@]}" "${non_diff_args[@]}")
  helm_echo_args=("${upgrade_args[@]}" "${scrubbed_overridden_args[@]}" "${non_diff_args[@]}")
  helm_diff_args=("${upgrade_args[@]}" "${overridden_args[@]}" "--suppress-secrets" "--allow-unreleased")

  if [[ -d "$chart_full" ]]; then
    helm_depup_args=("dependency" "update" "$chart_full")
    helm_depup_echo_args=("dependency" "update" "$chart_full")
    echo "Running command helm ${helm_depup_echo_args[@]}"
    $helm_bin "${helm_depup_args[@]}" | tee "$logfile"
  fi

  if [ "$show_diff" = true ] && current_deployed "$release"> /dev/null && [ "$devel" != true ]; then
    if [ "$tls_enabled" = true ]; then
      echo "helm diff does not support TLS at the present moment."
    else
      echo "Release diff:"
      $helm_bin diff "${helm_diff_args[@]}" | tee "$logfile"
    fi
  fi

  if [ "$exit_after_diff" = true ]; then
    echo "Exiting after diff"
  else
    echo "Running command helm ${helm_echo_args[@]} | tee $logfile"
    $helm_bin "${helm_args[@]}" $tls_flag | tee "$logfile"
  fi

  if [ -n "$wait" ] && [ "$wait" -gt "0" ]; then
    echo "Waiting for $wait Seconds"
    sleep $wait
  fi
}

helm_delete() {
  if [ -z "$release" ]; then
    echo "invalid payload (missing release if delete=true)"
    exit 1
  fi
  echo "Deleting the release $release..."
  delete_args=("delete" "--tiller-namespace=$tiller_namespace")
  if [ "$debug" = true ]; then
    delete_args+=("--dry-run" "--debug")
  fi

  if [ "$purge" = true ]; then
    delete_args+=("--purge")
  fi

  delete_args+=("$release")
  logfile="/tmp/log"
  mkdir -p /tmp
  echo "Running command helm ${delete_args[@]} | tee $logfile"
  $helm_bin "${delete_args[@]}" $tls_flag | tee $logfile
}

helm_test() {
  if [ -z "$release" ]; then
    echo "invalid payload (missing release if test=true)"
    exit 1
  fi
  echo "Testing the release $release..."
  test_args=("test" "--tiller-namespace=$tiller_namespace")
  if [ "$debug" = true ]; then
    test_args+=("--dry-run" "--debug")
  fi
  test_args+=("$release")
  logfile="/tmp/log"
  mkdir -p /tmp
  echo "Running command helm ${test_args[@]} | tee $logfile"
  result=$(${helm_bin} "${test_args[@]}" $tls_flag || true)

  if [[ $result = *"FAILED"* ]]; then
    _cmd=$(echo $result | awk -F '`' '{print $2};')

    echo ""
    echo "#### FAILED TEST OUTPUT ####" | tee $logfile
    $_cmd | tee $logfile
    echo "#### FAILED TEST OUTPUT ####" | tee $logfile
    echo ""

    cleanup=$(echo $_cmd | sed 's/logs/delete pod/g')
    $cleanup | tee $logfile

    exit 1
  elif [[ $result = *"ERROR"* ]]; then
    echo $result | tee $logfile
    exit 1
  elif [[ $result = *"PASSED"* ]]; then
    echo $result | tee $logfile
    TEST_PODS=$(echo $result | awk '{for(i=1;i<=NF;i++)if($i=="RUNNING:")print $(i+1)}' | sed 's/^/ /' )
    kubectl delete pod $TEST_PODS -n $namespace | tee $logfile
  else
    echo "Unhandled"
    exit 1
  fi
}

wait_ready_notice() {
  if [ -n "$wait_until_ready" ] && [ "$wait_until_ready" -gt "0" ]; then
    echo "Waiting until deployment of $release is ready... (up to $wait_until_ready seconds)"
  fi
}

helmfile_action() {
  echo "Executing Helmfile function"
  echo "hf_enable: ${hf_enable}"
  echo "hf_action: ${hf_action}"
  echo "hf_directory: ${hf_directory}"
  echo "hf_file: ${hf_file}"
  echo "hf_environment: ${hf_environment}"
  echo "hf_state_values_file: ${hf_state_values_file}"
  echo "hf_selector: ${hf_selector}"
  echo "hf_env_vars: ${hf_env_vars}"

  if [ -n "$hf_env_vars" ]; then
    IFS=' ' read -r -a envvars <<< "${hf_env_vars}"
    export "${envvars[@]}"
  fi

  apply_args=()

  if [ -n "$hf_directory" ]; then
    cd /tmp/build/put/$hf_directory
  fi

  if [ ! -d "helmfile.d" ]; then
    if [ -n "$hf_file" ]; then
      apply_args+=("--file" "$hf_file")
    fi
  fi

  if [ -n "$hf_environment" ]; then
    apply_args+=("--environment" "$hf_environment")
  fi

  if [ -n "$namespace" ]; then
    apply_args+=("--namespace" "$namespace")
  fi

  if [ -n "$hf_state_values_file" ]; then
    apply_args+=("--state-values-file" "$hf_state_values_file")
  fi

  if [ -n "$hf_state_values_set" ]; then
    apply_args+=("--state-values-set" "$hf_state_values_set")
  fi

  if [ -n "$hf_selector" ]; then
    apply_args+=("--selector" "$hf_selector")
  fi

  apply_args+=("$hf_action")

  if [ -n "$values" ]; then
    apply_args+=("--values" "$values")
  fi

  apply_args+=("--suppress-secrets")

  echo "Arguments: ${apply_args[@]}"

  helmfile "${apply_args[@]}" | tee $logfile
}

if [ "$delete" = true ]; then
  helm_delete
  result="$(jq -n "{version:{release:\"$release\", deleted: \"true\"}, metadata: [{name: \"release\", value: \"$release\"}]}")"
  echo "$result" | jq -s add  >&3
elif [ "$test" = true ]; then
  helm_test
  result="$(jq -n "{version:{release:\"$release\", tested: \"true\"}, metadata: [{name: \"release\", value: \"$release\"}]}")"
  echo "$result" | jq -s add  >&3
elif [ "$hf_enable" = "true" ]; then
  helmfile_action

  if [ "$release" = "" ]; then
    release=$(${helm_bin} ls -qrd --tiller-namespace $tiller_namespace --max 20 | head -1)
  fi
  deployed=$(current_deployed "$release")
  revision=$(echo $deployed | awk '{ print $1 }')
  chart=$(echo $deployed | awk '{ print $8 }')
  echo "Deployed revision $revision of $release"
  wait_ready_notice
  result="$(jq -n "{version:{release:\"$release\", revision:\"$revision\"}, metadata: [{name: \"release\", value: \"$release\"},{name: \"revision\", value: \"$revision\"},{name: \"chart\", value: \"$chart\"}]}")"
  echo "$result" | jq -s add  >&3
else
  echo "Installing $release"
  helm_upgrade

  if [ "$release" = "" ]; then
    release=$(${helm_bin} ls -qrd --tiller-namespace $tiller_namespace --max 20 | head -1)
  fi
  deployed=$(current_deployed "$release")
  revision=$(echo $deployed | awk '{ print $1 }')
  chart=$(echo $deployed | awk '{ print $8 }')
  echo "Deployed revision $revision of $release"
  wait_ready_notice
  result="$(jq -n "{version:{release:\"$release\", revision:\"$revision\"}, metadata: [{name: \"release\", value: \"$release\"},{name: \"revision\", value: \"$revision\"},{name: \"chart\", value: \"$chart\"}]}")"
  echo "$result" | jq -s add  >&3
fi
