#!/bin/bash

set -e
set -o pipefail

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

source /opt/resource/common.sh

# Read inputs
payload=$(mktemp $TMPDIR/helm-resource-request.XXXXXX)
cat > $payload <&0

# Parse parameters
namespace=$(jq -r '.source.namespace // "default"' < $payload)
release=$(jq -r '.source.release // ""' < $payload)
tiller_namespace=$(jq -r '.source.tiller_namespace // "kube-system"' < $payload)
cluster_url=$(jq -r '.source.cluster_url // ""' < $payload)

tillerless=$(jq -r '.source.tillerless // "false"' < $payload)
if [ "$tillerless" = true ]; then
  helm_bin="helm tiller run ${tiller_namespace} -- helm"
else
  helm_bin="helm"
fi

current_release=$(jq -r '.version.release' < $payload || true)
if [ -z "$release" ]; then
  release="$current_release"
fi

tls_enabled=$(jq -r '.source.tls_enabled // "false"' < $payload)
if [ "$tls_enabled" = true ]; then
  tls_flag="--tls"
fi

current_rev=$(jq -r '.version.revision // "0"' < $payload || true)

if [ -z "$cluster_url" ]; then
  # Since the resource was configured to use a dynamic namespace,
  # check does not make any sense since it is impossible to know which
  # tiller and which release name should be checked.
  # The resource is in "put" only mode.
  if [ $current_rev -eq 0 ]; then
    # When there was no `version` passed in, return an empty list
    echo '[]' >&3
  else
    # When the `version` was passed in, parrot it back
    printf '[{"revision":"%s","release":"%s"}]\n' "$current_rev" "$release" | jq -M . >&3
  fi

  # Check has successfully finished so exit with success.
  exit 0
fi

# Prepare
setup_resource $payload
echo "Resource setup successful."

if [ "$current_rev" -eq "0" ]; then
  # Empty => return the current
  helm tiller run $tiller_namespace -- helm history $tls_flag --tiller-namespace $tiller_namespace --max 20 $release | tail -n 1 | while read -r line; do
    revision=$(echo $line | awk '{ print $1 }')
    echo "$revision"
  done | jq -R '.' | jq -s "map({\"revision\": ., \"release\": \"$release\"})" >&3
else
  # All versions equal and newer
  helm tiller run $tiller_namespace -- helm history $tls_flag --tiller-namespace $tiller_namespace --max 20 $release | tail -n +2 | while read -r line; do 
    revision=$(echo $line | awk '{ print $1 }')
    if [ -z "$current_rev" ] || [ "$revision" -ge "$current_rev" ]; then
      echo "$revision"
    fi
  done | jq -R '.' | jq -s "map({\"revision\": ., \"release\": \"$release\"})" >&3
fi
